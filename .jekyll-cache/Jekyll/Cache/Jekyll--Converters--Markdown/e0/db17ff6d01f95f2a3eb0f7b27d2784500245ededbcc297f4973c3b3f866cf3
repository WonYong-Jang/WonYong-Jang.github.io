I"1<h2 id="when-creating-functions">When Creating functions</h2>

<p>val과 def 함수를 만들 때 차이점 없이 스칼라 코드를 작성할 수도 있다. 아래 예제를 보자.</p>

<blockquote>
  <p>우선 def 함수는 엄밀하게 함수가 아니라 method이지만 편의를 위해 함수라고 부른다.</p>
</blockquote>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">val</span> <span class="nv">isEvenVal</span> <span class="k">=</span> <span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>   <span class="c1">// a function</span>
<span class="k">def</span> <span class="nf">isEvenDef</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>       <span class="c1">// a method</span>
</code></pre></div></div>

<p>그다음 List에 filter 메서드에 전달해보면,</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nv">xs</span> <span class="k">=</span> <span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">)</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nv">xs</span><span class="o">.</span><span class="py">filter</span><span class="o">(</span><span class="n">isEvenVal</span><span class="o">)</span>     <span class="c1">//val</span>

<span class="n">scala</span><span class="o">&gt;</span> <span class="nv">xs</span><span class="o">.</span><span class="py">filter</span><span class="o">(</span><span class="n">isEvenDef</span><span class="o">)</span>     <span class="c1">//def</span>
</code></pre></div></div>

<p>위와 같이 차이점이 거의 보이지 않지만, 스칼라 개발자로써 val과 def의 
차이점을 정확히 이해하는 것은 어떤 경우의 코드 작동 방식을 이해하는 것에 
도움이 된다.</p>

<p>val과 def의 차이점에 대해 각각 살펴보자.</p>

<h4 id="val-함수">val 함수</h4>

<p>val 함수는 아래와 같이 사용할 수 있다. <br />
<code class="language-plaintext highlighter-rouge">여기서 val 함수는 Function class의 instance 변수라는 점이 중요하다.</code></p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nv">toUpperVal</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">String</span> <span class="k">=</span> <span class="nv">_</span><span class="o">.</span><span class="py">toUpperCase</span>
<span class="n">toUpperVal</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="nc">String</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function1</span><span class="o">&gt;</span>    
</code></pre></div></div>

<p>scala REPL에서 val 함수를 만든 후 결과를 보면 val 함수는 Function1의 
instance 임을 알 수 있다.</p>

<p>Function1은 함수의 인자가 1개인 것을 나타낸다.</p>

<p>인자가 2개인 함수를 만들어보자.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="nv">sumVal</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">y</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="n">sumVal</span><span class="k">:</span> <span class="o">(</span><span class="kt">Int</span><span class="o">,</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">&lt;</span><span class="n">function2</span><span class="o">&gt;</span>   
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">scala에서는 이런식으로 Function0 부터 Function22까지 즉, 0개의 인자부터 
22개의 인자까지 받을 수 있는 Class를 제공한다.</code></p>

<p><code class="language-plaintext highlighter-rouge">Function class에는 apply method가 존재한다. 우리는 sumVal(1, 2)처럼 호출을 
할 때 호출하는 생김새가 함수처럼 보이지만, 사실 이것은 Scala의 
syntactic sugar이다.</code>  <br />
<code class="language-plaintext highlighter-rouge">sumVal(1, 2)을 사용하는 것은 내부적으로 sumVal.apply(1,2)를 사용하는 것과 
동일하다.</code></p>

<p><code class="language-plaintext highlighter-rouge">val 함수는 Function class의 instance 변수이므로, 다음과 같이 
anonymous class를 사용하여 val 함수를 생성할 수도 있다.</code></p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">val</span> <span class="nv">strLen</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Function1</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="o">{</span>
      <span class="k">override</span> <span class="k">def</span> <span class="nf">apply</span><span class="o">(</span><span class="n">v1</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="o">{</span>
        <span class="nv">v1</span><span class="o">.</span><span class="py">length</span>
      <span class="o">}</span>
    <span class="o">}</span>
<span class="nf">strLen</span><span class="o">(</span><span class="s">"abc"</span><span class="o">)</span> <span class="c1">// 출력 : 3</span>
</code></pre></div></div>

<h4 id="def-함수">def 함수</h4>

<p>def는 클래스나 object안에 정의해야 하는 method이다.</p>

<hr />

<h2 id="when-to-use-val-or-def-in-scala-traits">When to use val or def in Scala traits?</h2>

<p><a href="https://stackoverflow.com/questions/19642053/when-to-use-val-or-def-in-scala-traits">Stack overflow</a>의 
글을 참고 하였고, <code class="language-plaintext highlighter-rouge">해당 글에는 trait에 추상 멤버를 사용할 때 val을 사용하는 것은 
안티 패턴이며, def를 권장하고 있다.</code></p>

<p>우선 def는 def, val, lazy val, 객체에 의해 구현 될 수 있다.  <br />
즉, def가 멤버를 정의하는데에 있어서 가장 추상적인 형태이기 때문에 
trait에서 추상 멤버를 사용하는데 가장 적합하다.</p>

<p>아래 예제를 보면서 이해해보자. <br />
trait를 def를 이용하여 추상 멤버를 생성했고 F1, F2, F3 각각을 
상속 받았을때 모두 정상적으로 구현 가능하다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nc">Foo</span> <span class="o">{</span> <span class="k">def</span> <span class="nf">bar</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">}</span>

<span class="k">object</span> <span class="nc">F1</span> <span class="k">extends</span> <span class="nc">Foo</span> <span class="o">{</span> <span class="k">def</span> <span class="nf">bar</span> <span class="k">=</span> <span class="nv">util</span><span class="o">.</span><span class="py">Random</span><span class="o">.</span><span class="py">nextInt</span><span class="o">(</span><span class="mi">33</span><span class="o">)</span> <span class="o">}</span> <span class="c1">// ok</span>

<span class="k">class</span> <span class="nc">F2</span><span class="o">(</span><span class="k">val</span> <span class="nv">bar</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">Foo</span> <span class="c1">// ok</span>

<span class="k">object</span> <span class="nc">F3</span> <span class="k">extends</span> <span class="nc">Foo</span> <span class="o">{</span>
  <span class="k">lazy</span> <span class="k">val</span> <span class="nv">bar</span> <span class="k">=</span> <span class="o">{</span> <span class="c1">// ok</span>
    <span class="nv">Thread</span><span class="o">.</span><span class="py">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">)</span>  <span class="c1">// really heavy number crunching</span>
    <span class="mi">42</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">하지만 만약 아래와 같이 trait를 사용한다면, F1, F3은 정상적으로 define하지 못한다.</code></p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nc">Foo</span> <span class="o">{</span> <span class="k">val</span> <span class="nv">bar</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">}</span>    
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">또한, val을 사용했을때 초기화 문제가 발생할 수 있다.</code>  <br />
아래와 같이 사용했을 때 원하지 않는 결과가 발생할 수 있다.</p>

<div class="language-scala highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">trait</span> <span class="nc">Foo</span> <span class="o">{</span> 
  <span class="k">val</span> <span class="nv">bar</span><span class="k">:</span> <span class="kt">Int</span> 
  <span class="k">val</span> <span class="nv">schoko</span> <span class="k">=</span> <span class="n">bar</span> <span class="o">+</span> <span class="n">bar</span>
<span class="o">}</span>

<span class="k">object</span> <span class="nc">Fail</span> <span class="k">extends</span> <span class="nc">Foo</span> <span class="o">{</span>
  <span class="k">val</span> <span class="nv">bar</span> <span class="k">=</span> <span class="mi">33</span>
<span class="o">}</span>

<span class="nv">Fail</span><span class="o">.</span><span class="py">schoko</span>  <span class="c1">// zero!!</span>
</code></pre></div></div>

<hr />

<p><strong>Reference</strong></p>

<p><a href="https://alvinalexander.com/scala/fp-book-diffs-val-def-scala-functions/">https://alvinalexander.com/scala/fp-book-diffs-val-def-scala-functions/</a><br />
<a href="http://jason-heo.github.io/programming/2019/05/25/scala-val-vs-def-func.html">http://jason-heo.github.io/programming/2019/05/25/scala-val-vs-def-func.html</a><br />
<a href="https://stackoverflow.com/questions/19642053/when-to-use-val-or-def-in-scala-traits">https://stackoverflow.com/questions/19642053/when-to-use-val-or-def-in-scala-traits</a></p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://zcx6263.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET