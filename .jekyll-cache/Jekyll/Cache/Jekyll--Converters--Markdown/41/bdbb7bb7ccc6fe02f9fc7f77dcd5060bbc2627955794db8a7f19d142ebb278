I"]<h2 id="optional이란">Optional이란?</h2>

<p>개발을 할 때 가장 많이 발생하는 예외 중 하나가 바로 NPE(NullPointerException)이다. NPE를 
피하기 위해서는 null을 검사하는 로직을 추가해야 하는데, null 검사를 해야하는 변수가 많은 경우 
코드가 복잡해지고 로직이 상당히 번거롭다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">getNames</span><span class="o">();</span>
<span class="n">names</span><span class="o">.</span><span class="na">sort</span><span class="o">();</span> <span class="c1">// names가 null이라면 NPE가 발생함</span>
 
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">getNames</span><span class="o">();</span>
<span class="c1">// NPE를 방지하기 위해 null 검사를 해야함</span>
<span class="k">if</span><span class="o">(</span><span class="n">names</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">names</span><span class="o">.</span><span class="na">sort</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Java8부터 Optional&lt;T&gt; 클래스를 사용해 NPE를 방지할 수 있도록 도와준다. 
Optional&lt;T&gt;는 null이 올 수 있는 값을 감싸는 Wrapper 클래스로, NPE가 발생하지 않도록 
도와준다. Optional 클래스는 아래와 같은 value에 값을 저장하기 때문에 null이더라도 
바로 NPE가 발생하지 않으며, 클래스이기 때문에 각종 메소드를 제공해준다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
 
  <span class="c1">// If non-null, the value; if null, indicates no value is present</span>
  <span class="kd">private</span> <span class="kd">final</span> <span class="no">T</span> <span class="n">value</span><span class="o">;</span>   
  <span class="o">...</span>
<span class="o">}</span>

</code></pre></div></div>

<hr />

<h2 id="optional-활용하기">Optional 활용하기</h2>

<p>Optional은 Wrapper 클래스이기 때문에 빈 값이 올수도 있는데, 빈 객체는 아래와 같이 생성할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">optional</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">optional</span><span class="o">);</span> <span class="c1">// Optional.empty</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">optional</span><span class="o">.</span><span class="na">isPresent</span><span class="o">());</span> <span class="c1">// false</span>
</code></pre></div></div>

<p>만약 어떤 데이터가 null이 올 수 있는 경우에는 해당 값을 Optional로 감싸서 
생성할 수 있다. 그리고 orElse 또는 orElseGet 메소드를 이용해서 값이 없는 경우라도 
안전하게 값을 가져올 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Optional의 value는 값이 있을 수도 있고 null 일 수도 있다.</span>
<span class="c1">// null 값이 들어온다면 Optional.empty이 들어가 있다.   </span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">optional</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> 
<span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">optional</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"anonymous"</span><span class="o">);</span> <span class="c1">// 값이 없다면 "anonymous" 를 리턴</span>
</code></pre></div></div>
<hr />

<h4 id="optional-예시-1">Optional 예시 1</h4>

<p>기존에는 아래와 같이 null 검사를 한 후에 null일 경우에는 새로운 객체를 생성해주어야 했다. 
이러한 과정을 코드로 나타내면 다소 번잡해보이는데, Optional<T>와 람다를 이용하면 해당 과정을 
보다 간단하게 표현할 수 있다.</T></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Java8 이전</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getNames</span><span class="o">();</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">tempNames</span> <span class="o">=</span> <span class="n">list</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">list</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

<span class="c1">// null인 경우 new ArrayList로 생성 </span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">nameList</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getList</span><span class="o">()).</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
</code></pre></div></div>

<h4 id="optional-예시-2">Optional 예시 2</h4>

<p>예를 들어 아래와 같은 우편번호를 꺼내는 null 검사 코드가 있다고 하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">getUser</span><span class="o">();</span>
<span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Address</span> <span class="n">address</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getAddress</span><span class="o">();</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">address</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">postCode</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">getPostCode</span><span class="o">();</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">postCode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">postCode</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="s">"우편번호 없음"</span><span class="o">;</span>
</code></pre></div></div>

<p>이러한 코드는 아래와 같이 Optional을 사용하면 아래와 같이 표현 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 위의 코드를 Optional로 펼쳐놓으면 아래와 같다.</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">UserVO</span><span class="o">&gt;</span> <span class="n">userVO</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">getUser</span><span class="o">());</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Address</span><span class="o">&gt;</span> <span class="n">address</span> <span class="o">=</span> <span class="n">userVO</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">UserVO:</span><span class="o">:</span><span class="n">getAddress</span><span class="o">);</span>
<span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">postCode</span> <span class="o">=</span> <span class="n">address</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Address:</span><span class="o">:</span><span class="n">getPostCode</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">postCode</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"우편번호 없음"</span><span class="o">);</span>
 
<span class="c1">// 그리고 위의 코드를 다음과 같이 축약해서 쓸 수 있다.</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">userVO</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">UserVO:</span><span class="o">:</span><span class="n">getAddress</span><span class="o">)</span>
    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Address:</span><span class="o">:</span><span class="n">getPostCode</span><span class="o">)</span>
    <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"우편번호 없음"</span><span class="o">);</span>

</code></pre></div></div>

<h4 id="optional-예시-3--orelsethrow-">Optional 예시 3 ( orElseThrow(..) )</h4>

<p>예를 들어 아래와 같이 이름을 대문자로 변경하는 코드에서 NPE 처리를 해준다고 하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">getName</span><span class="o">();</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
 
<span class="k">try</span> <span class="o">{</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">NullPointerException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="nf">CustomUpperCaseException</span><span class="o">();</span>
</code></pre></div></div>

<p>위의 코드는 다소 번잡하고 가독성이 떨어지는데 이를 Optional을 활용하면 아래와 같이 표현할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">nameOpt</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">getName</span><span class="o">());</span>
<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">nameOpt</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">CustomUpperCaseExcpetion:</span><span class="o">:</span><span class="k">new</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">();</span>
</code></pre></div></div>

<hr />

<h4 id="optional의-orelse-와-orelseget-차이">Optional의 orElse 와 orElseGet 차이</h4>

<p>Optional API의 단말 연산에는 orElse와 orElseGet함수가 있다. 비슷해 보이는 두 함수는 
엄청난 차이가 있는데, 해당 내용을 요약하면 아래와 같다.</p>

<p><code class="language-plaintext highlighter-rouge">- orElse : null이든 아니든 항상 호출된다.</code>   <br />
<code class="language-plaintext highlighter-rouge">- orElseGet : null일 때만 호출된다.</code></p>

<p>Optional에 값이 있으면 orElse()부분은 실행된 값이 무시되고 버려진다. 따라서 orElse() 는 새 객체 생성이나 
새로운 연산을 유발하지 않고 이미 생성되었거나 이미 계산된 값일 때만 사용해야 한다!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">findUserEmail</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">userEmail</span> <span class="o">=</span> <span class="s">"email"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">result1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">userEmail</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="n">getUserEmail</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result1</span><span class="o">);</span>
 
    <span class="n">userEmail</span> <span class="o">=</span> <span class="s">"email"</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">result2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">userEmail</span><span class="o">).</span><span class="na">orElseGet</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getUserEmail</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result2</span><span class="o">);</span>
<span class="o">}</span>
 
<span class="kd">private</span> <span class="nc">String</span> <span class="nf">getUserEmail</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"getUserEmail() Called"</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"userEmail@gmail.com"</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="c1">//getUserEmail() Called</span>
<span class="c1">//email</span>

<span class="c1">//email</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">출력 결과를 분석해보면 orElse의 경우 값이 null이든 아니든 호출되어야 하므로 
뒤의 연산이 진행되어야 하며, 출력 결과를 통해 해당 함수가 호출되었음을 볼 수 있다.    
하지만 orElseGet의 경우에는 null일 때만 해당 연산이 진행 되므로 userEmail이 null이 
아니기 때문에 getUserEmail()이 호출되지 않았음을 확인할 수 있다. 또한 위의 코드에서 orElse의 
경우는 getUserEmail()을 매개변수로 사용하고, orElseGet은 this::getUserEmail을 매개변수로 
사용하고 있다. 그 이유는 orElse는 값을 취하고 orElseGet은 Supplier를 취하기 때문이다.</code></p>

<h4 id="orelse-와-orelseget에-의한-장애">orElse 와 orElseGet에 의한 장애</h4>

<p>orElse와 orElseGet은 명확하고 중요한 차이점을 가지고 있는데, 차이점을 정확히 
인식하지 못하면 장애가 발생할 수 있다. 예를 들어 userEmail을 Unique한 값으로 갖는 
시스템에서 아래와 같은 코드를 작성하였다고 하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">findByUserEmail_Wrong</span><span class="o">(</span><span class="nc">String</span> <span class="n">userEmail</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// orElse에 의해 userEmail이 이미 존재해도 유저 생성 함수가 호출되어 에러 발생</span>
    <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserEmail</span><span class="o">(</span><span class="n">userEmail</span><span class="o">)</span>
            <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">createUserWithEmail</span><span class="o">(</span><span class="n">userEmail</span><span class="o">));</span>
<span class="o">}</span>
 
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">findByUserEmailDetail</span><span class="o">(</span><span class="nc">String</span> <span class="n">userEmail</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">newUser</span> <span class="o">=</span> <span class="n">createUserWithEmail</span><span class="o">(</span><span class="n">userEmail</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserEmail</span><span class="o">(</span><span class="n">userEmail</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="n">newUser</span><span class="o">);</span>
<span class="o">}</span>
 
<span class="kd">private</span> <span class="nc">String</span> <span class="nf">createUserWithEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">userEmail</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="n">newUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">();</span>
    <span class="n">newUser</span><span class="o">.</span><span class="na">setUserEmail</span><span class="o">(</span><span class="n">userEmail</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">newUser</span><span class="o">);</span>
<span class="o">}</span>

</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">위의 예제에는 Optional의 orElse를 사용하고 있기 때문에, 입력으로 들어온 userEmail을 사용중인 User를 
발견하더라도 해당 userEmail을 갖는 사용자를 생성하게 된다.</code> 보다 직관적으로 이해하기 위해 findByUserEmail 코드를 
자세하게 풀어쓰면 findByUserEmailDetail과 같다. 하지만 DB에서는 userEmail이 Unique로 설정되어 있기 때문에 
오류가 발생하게 된다. <code class="language-plaintext highlighter-rouge">그렇기 때문에 위와 같은 경우에는 해당 코드를 orElseGet으로 수정해야 한다.</code> 실제 서비스에서 
위와 같은 오류를 범한다면 큰 시스템 장애로 돌아오게 된다. 그렇기 때문에 orElse 와 orElseGet의 차이점을 정확하게 
이해하고 사용하는 것이 중요하다.</p>

<p><code class="language-plaintext highlighter-rouge">위의 내용을 정리해보면 불필요한 호출을 줄이기 위해 null 일 경우 반환할 값이 
primitive type이면 orElse(), 객체를 생성해야만 한다면 orElseGet()을 
사용하면 될 것 같다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">obj1</span><span class="o">).</span><span class="na">orElse</span><span class="o">(</span><span class="mi">123</span><span class="o">);</span>      
<span class="nc">TestObject</span> <span class="n">object</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">obj2</span><span class="o">).</span><span class="na">orElseGet</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">TestObject</span><span class="o">());</span>   
<span class="nc">TestObject</span> <span class="n">object</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">obj2</span><span class="o">).</span><span class="na">orElseGet</span><span class="o">(</span><span class="nl">TestObject:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>    
</code></pre></div></div>

<hr />

<p><strong>Reference</strong></p>

<p><a href="https://mangkyu.tistory.com/70">https://mangkyu.tistory.com/70</a></p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://zcx6263.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET