I"zT<h2 id="목표">목표</h2>

<p>자바가 제공하는 다양한 연산자를 학습한다.</p>

<h2 id="학습할-것">학습할 것</h2>

<ul>
  <li>산술 연산자</li>
  <li>비트 연산자</li>
  <li>관계 연산자</li>
  <li>논리 연산자</li>
  <li>instanceof</li>
  <li>assignment(=) operator</li>
  <li>화살표(-&gt;) 연산자</li>
  <li>3항 연산자</li>
  <li>연산자 우선 순위</li>
  <li>(optional) Java 13 switch 연산자</li>
</ul>

<hr />

<h2 id="1-산술-연산자">1. 산술 연산자</h2>

<p><code class="language-plaintext highlighter-rouge">수학적 계산(사칙 연산/ 덧셈, 뺄셈, 곱셈, 나눗셈)에 사용되는 연산자이다. 자바에서 산술 연산은 
사칙연산과 나머지 연산을 포함한 다섯가지연산을 뜻한다.</code></p>

<p>자바에서 나머지 연산의 피연산자는 정수형과 실수형 모두 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">num</span><span class="o">=</span><span class="mf">5.2</span><span class="o">,</span> <span class="n">mod</span><span class="o">=</span><span class="mf">4.1</span><span class="o">;</span>
<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">num</span><span class="o">%</span><span class="n">mod</span><span class="o">);</span> <span class="c1">// 1.1 출력됨  </span>
</code></pre></div></div>

<p>자바는 컴파일하는 시점에서 변수에 어떤 상수를 입력할 때 범위를 체크하여 허용 범위를 넘어선다면 
에러를 발생시킨다. 또한 <code class="language-plaintext highlighter-rouge">산술 연산을 할 때 다음과 같이 자동 형변환(Promotion)이 일어 난다.</code></p>

<ul>
  <li>두 피연산자 중 하나라도 double 형이면 다른 하나도 double 형으로 변환하고 결과도 double형이다.</li>
  <li>그렇지 않고 두 피연산자 중 하나라도 float 형이면 다른 하나도 float 형으로 변환하고 결과도 float형이다.</li>
  <li>그렇지 않고 두 피연산자 중 하나라도 long 형이면 다른 하나도 long 형으로 변환하고 결과도 long형이다.</li>
  <li>그렇지 않다면 두 피연산자를 모두 int 형으로 변환하고 결과도 int 형이다.</li>
</ul>

<p>자바에서 산술연산에 대해서는 이 네 가지의 규칙을 따른다. 특히 마지막 규칙에 대해 아래 예를 확인해보자. 
byte형이나 short 형의 연산 결과는 int형이 된다. 따라서 다음과 같은 간단한 연산도 에러를 발생한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">short</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="kt">short</span> <span class="n">result</span> <span class="o">=</span> <span class="o">-</span><span class="n">num1</span><span class="o">;</span>       <span class="c1">// error</span>
<span class="kt">short</span> <span class="n">reuslt</span> <span class="o">=</span> <span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="o">;</span> <span class="c1">// error</span>
</code></pre></div></div>

<p>범위를 벗어나는 것도 아닌데 왜 에러가 발생하는지 처음에는 의아할 수 있다. -num1과 
num1 + num2 연산 결과는 int형이고 이것을 short형에 대입하려고 하기 때문이다. 
자바에서는 데이터 타입의 크기가 작은 자료형으로 타입 변환은 명시적으로 해주어야 한다. 
따라서 아래와 같이 명시적 타입 변환(Casting)을 해주어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">short</span> <span class="n">num1</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">num2</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="kt">short</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)(-</span><span class="n">num1</span><span class="o">);</span>       
<span class="kt">short</span> <span class="n">reuslt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">short</span><span class="o">)(</span><span class="n">num1</span> <span class="o">+</span> <span class="n">num2</span><span class="o">);</span> 
</code></pre></div></div>

<p>이것은 byte형에 대해서도 마찬가지이다.</p>

<hr />

<h2 id="2-비트-연산자">2. 비트 연산자</h2>

<p>비트연산은 1과 0을 가지고 이루어진다. 일반적으로 0이 false, 그 외의 모든 값을 true를 나타낸다.<br />
비트 연산자는 기능에 따라 비트 이동연산자, 비트 논리연산자로 구분한다.</p>

<h4 id="2-1-비트-이동-연산자">2-1. 비트 이동 연산자</h4>

<p><img width="700" alt="스크린샷 2020-11-27 오후 10 08 33" src="https://user-images.githubusercontent.com/26623547/100452917-6a1bd480-30fd-11eb-8514-51d676271328.png" /></p>

<blockquote>
  <p>https://coding-factory.tistory.com/521</p>
</blockquote>

<p>비트 이동 연산자는 정수 데이터의 비트를 왼쪽 또는 오른쪽으로 이동시키는 연산을 한다.</p>

<p><img width="581" alt="스크린샷 2020-11-27 오후 10 13 27" src="https://user-images.githubusercontent.com/26623547/100453169-ddbde180-30fd-11eb-918e-6a84945d018b.png" /></p>

<p>2 « 3 은 2를 32비트로 분해한 다음 왼쪽으로 3비트를 이동시키는 연산이다. 비트를 
왼쪽으로 3비트 이동할 때 맨 왼쪽 3비트는 밀려서 버려지게 되고 맨 오른쪽에는 0으로 채워진다.</p>

<p><img width="573" alt="스크린샷 2020-11-27 오후 10 13 34" src="https://user-images.githubusercontent.com/26623547/100453179-df87a500-30fd-11eb-96e4-7a51f526ca7b.png" /></p>

<p>16 » 3 은 위와 같이 3비트를 오른쪽으로 이동시키는 연산이다. 비트를 오른쪽으로 3비트 이동할 때 맨 오른쪽 3비트는 
밀려서 버려지게 되고 맨 왼쪽에는 최상위 부호비트와 동일한 값으로 채워진다. 
<code class="language-plaintext highlighter-rouge">즉, 최상위 부호비트가 0이라면 동일하게 0으로 채워지고, 1이라면 1로 빈공간을 채우게 된다.</code></p>

<p><img width="610" alt="스크린샷 2020-11-27 오후 10 13 49" src="https://user-images.githubusercontent.com/26623547/100453192-e3b3c280-30fd-11eb-96ef-0367c8483501.png" /></p>

<p><code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; 연산은 오직 자바에만 있는 연산이며 &gt;&gt; 와 기본원리는 같다. 다른 점은 
최상위 부호비트와 관계없이 무조건 0으로만 채워지게 된다.    
앞자리가 0으로만 채워지므로 결과값은 무조건 양수로 나타난다.</code></p>

<h4 id="2-2-비트-논리-연산자---">2-2. 비트 논리 연산자(&amp;, |, ^, ~)</h4>

<ul>
  <li>&amp;(AND) 연산자 : 두 비트 모두 1일 경우에만 연산 결과가 1</li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>(OR) 연산자: 두 비트 중 하나만 1일 경우에만 연산결과가 1</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>^(XOR) : 두 비트중 하나는 1이고 다른 하나가 0일 경우에만 연산결과가 1</li>
  <li>~(NOT) : 비트 반전(보수)</li>
</ul>

<hr />

<h2 id="3-관계-연산자">3. 관계 연산자</h2>

<p>비교 연산자라고도 하며 부등호를 생각하면 된다. 관계연산자의 결과는 true 혹은 
false 값인 boolean 자료형으로 반환이 된다.</p>

<hr />

<h2 id="4-논리-연산자">4. 논리 연산자</h2>

<ul>
  <li>논리 연산자는 AND(&amp;&amp;), OR(||), NOT(!) 세가지 연산자가 있으며 관계연산자와 
같이 사용되는 경우가 많다. 논리 연산자 역시 연산 결과가 true 혹은 false로 
반환된다.</li>
</ul>

<hr />

<h2 id="5-instanceof-연산자">5. instanceof 연산자</h2>

<p>참조변수가 참조하고 있는 인스턴스의 실제 타입을 알아보기 위해 instanceof 연산자를 
사용한다.  <br />
주로 조건문에 사용되며, instanceof의 왼쪽에는 참조변수를 
오른쪽에는 타입(클래스명)이 피연산자로 위치한다.</p>

<p><code class="language-plaintext highlighter-rouge">instanceof를 이용한 연산결과로 true를 얻었다는 것은 참조변수가 검사한 타입으로 
형변환이 가능하다는 것을 뜻한다.</code></p>

<hr />

<h2 id="6-assignment-operator">6. assignment(=) operator</h2>

<p>변수에 값 또는 수식의 연산결과를 저장(메모리에)하는데 사용한다. 왼쪽에는 
반드시 변수가 위치해야 하며, 오른쪽에는 리터럴이나 변수 또는 수식이 올수 있다.</p>

<hr />

<h2 id="7-화살표--연산자">7. 화살표(-&gt;) 연산자</h2>

<p>자바가 람다가 도입되면서 등장한 연산자이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">min</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>

    <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="n">x</span> <span class="o">:</span> <span class="n">y</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>위의 예제처럼 메소드를 람다 표현식으로 표현하면, 클래스를 작성하고 
객체를 생성하지 않아도 메소드를 사용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="n">x</span> <span class="o">:</span> <span class="n">y</span><span class="o">;</span>
</code></pre></div></div>

<hr />

<h2 id="8-3항-연산자">8. 3항 연산자</h2>

<p>조건식에 따라 참이면 A, 거짓이면 B를 선택</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="n">조건식</span><span class="o">)</span> <span class="o">?</span> <span class="no">A</span> <span class="o">:</span> <span class="no">B</span>   
</code></pre></div></div>

<hr />

<h2 id="9-연산자-우선-순위">9. 연산자 우선 순위</h2>

<p>수학에서도 그렇지만 모든 연산에서는 우선순위가 있다. 괄호안에 있는 
연산이 가장 먼저 수행되며, 연산자 우선순위가 같은 경우 연산 방향에 
따라 진행된다.</p>

<blockquote>
  <p>ex) 100 * 2 / 3 % 5  =&gt; 연산자들 우선순위 같다. 연산방향 왼쪽에서 오른쪽 이므로   결과 : 1</p>
</blockquote>

<blockquote>
  <p>ex) a = b = c = 5;   =&gt; 연산자들 우선순위 같다. 연산방향 오른쪽에서 왼쪽으로 진행되고 a,b,c, 변수에 5 대입된다.</p>
</blockquote>

<hr />

<h2 id="10-java-13-switch-연산자">10. Java 13 switch 연산자</h2>

<p><code class="language-plaintext highlighter-rouge">기존에 switch문이 변경된 것이 아니라 switch 연산자가 추가 된 것이다.</code></p>

<h4 id="화살표-연산자">화살표 연산자</h4>

<p><code class="language-plaintext highlighter-rouge">:대신 -&gt; 를 사용할수 있다.</code></p>

<p>기존 switch 문은 break가 없다면 계속해서 아래 case를 검사 하게 되는데 
-&gt; 연산자를 사용하게 되면 실행 후 break가 없어도 switch문을 빠져나오게 된다.</p>

<p>아래는 기존에 사용하던 switch 문의 모습이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">Day</span> <span class="o">{</span>
    <span class="no">SUNDAY</span><span class="o">,</span> <span class="no">MONDAY</span><span class="o">,</span> <span class="no">TUESDAY</span><span class="o">,</span> <span class="no">WEDNESDAY</span><span class="o">,</span> <span class="no">THURSDAY</span><span class="o">,</span> <span class="no">FRIDAY</span><span class="o">,</span> <span class="no">SATURDAY</span><span class="o">;</span>
<span class="o">}</span>


<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Day</span> <span class="n">day</span> <span class="o">=</span> <span class="nc">Day</span><span class="o">.</span><span class="na">THURSDAY</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">result</span>  <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">switch</span> <span class="o">(</span><span class="n">day</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="nl">SUNDAY:</span>
            <span class="k">case</span> <span class="nl">MONDAY:</span>
            <span class="k">case</span> <span class="nl">TUESDAY:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="nl">WEDNESDAY:</span>
            <span class="k">case</span> <span class="nl">THURSDAY:</span>
                <span class="n">result</span>  <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="nl">FRIDAY:</span>
            <span class="k">case</span> <span class="nl">SATURDAY:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span> <span class="c1">// 출력 : 5 </span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 소스를 아래처럼 -&gt; 연산자를 이용하여 간결하게 줄일 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Day</span> <span class="n">day</span> <span class="o">=</span> <span class="nc">Day</span><span class="o">.</span><span class="na">THURSDAY</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">result</span>  <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">switch</span> <span class="o">(</span><span class="n">day</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="no">SUNDAY</span><span class="o">,</span> <span class="no">MONDAY</span><span class="o">,</span> <span class="no">TUESDAY</span> <span class="o">-&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span> <span class="c1">// break 사용없이 빠져나옴   </span>
            <span class="k">case</span> <span class="no">WEDNESDAY</span><span class="o">,</span> <span class="no">THURSDAY</span> <span class="o">-&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
            <span class="k">case</span> <span class="no">FRIDAY</span><span class="o">,</span> <span class="no">SATURDAY</span> <span class="o">-&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span>
            <span class="k">default</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="yield">yield</h4>

<p>yield 키워드를 사용하여 결과값을 반환할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

<span class="nc">String</span> <span class="n">b</span> <span class="o">=</span> <span class="k">switch</span> <span class="o">(</span><span class="n">a</span><span class="o">)</span> <span class="o">{</span>
             <span class="k">case</span> <span class="mi">1</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"case 1"</span><span class="o">);</span>
                <span class="n">yield</span> <span class="s">"return : case 1"</span><span class="o">;</span>
              <span class="o">}</span>
              <span class="k">case</span> <span class="mi">2</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"case 2"</span><span class="o">);</span>
                <span class="n">yield</span> <span class="s">"return : case 2"</span><span class="o">;</span>
              <span class="o">}</span>
              <span class="k">default</span> <span class="o">-&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">();</span>
          <span class="o">};</span>
</code></pre></div></div>

<p>Output</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>case 1
return : case 1
</code></pre></div></div>

<hr />

<p><strong>Reference</strong></p>

<p><a href="http://www.tcpschool.com/java/java_lambda_concept">http://www.tcpschool.com/java/java_lambda_concept</a> <br />
<a href="https://kephilab.tistory.com/28">https://kephilab.tistory.com/28</a> <br />
<a href="https://coding-factory.tistory.com/521">https://coding-factory.tistory.com/521</a>       <br />
<a href="https://studymake.tistory.com/416">https://studymake.tistory.com/416</a>  <br />
<a href="https://github.com/whiteship/live-study/issues/3">https://github.com/whiteship/live-study/issues/3</a></p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://zcx6263.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET