I"^R<h1 id="high-level-rest-client-란">High Level Rest Client 란?</h1>

<p><code class="language-plaintext highlighter-rouge">Elasticsearch를 사용하는 자바 어플리케이션을 만들기 위해서는 
적절한 client api를 사용하는 방법을 찾아보게 될 것인데, 
    Transport client와 Rest client를 사용할 수 있다.</code></p>

<p>Transport client는 곧 삭제될 예정이기 때문에 Rest client를 사용하는 코드를 
작성하려고 한다.</p>

<p>이 중에서 High Level Rest Client를 사용할 예정이다.</p>

<hr />

<h3 id="compatibility">Compatibility</h3>

<p>Java High Level REST Client 는 최소 자바 8을 요구한다. Client와 엘라스틱 서치 버전도 
동일하게 맞춰야 한다. 엘라스틱 서치 버전과 client 버전을 완전히 동일하게 맞출 필요는 없지만
엘라스틱 버전이 client 버전 보다 높아야 한다.</p>

<p>예를 들면 Client 버전이 6.0 이라면 엘라스틱 서치 버전은 6.x는 호환이 가능하다. 하지만 그렇지 
않을 경우 호환이 되지 않을 수 있다.</p>

<h3 id="initialization">Initialization</h3>

<p>RestHighLevelClient는 내부적으로 제공된 builder를 이용한 request를 수행하기 위해 low-level client를 만든다.  <br />
low-level client는 커넥션 풀을 유지하고 스레드들을 시작하기 때문에 high-level client를 
사용이 끝나게 되면 close를 해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">RestHighLevelClient</span> <span class="n">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestHighLevelClient</span><span class="o">(</span>
        <span class="nc">RestClient</span><span class="o">.</span><span class="na">builder</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">9200</span><span class="o">,</span> <span class="s">"http"</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">HttpHost</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">,</span> <span class="mi">9201</span><span class="o">,</span> <span class="s">"http"</span><span class="o">)));</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>   
</code></pre></div></div>

<hr />

<h2 id="1-search-api">1. Search API</h2>

<p>여러가지 Search API에 대해 알아보자.</p>

<h4 id="search-request">Search Request</h4>

<p>아래는 SearchReqeust의 기본적인 형태이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SearchRequest</span> <span class="n">searchRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchRequest</span><span class="o">();</span> 
<span class="nc">SearchSourceBuilder</span> <span class="n">searchSourceBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchSourceBuilder</span><span class="o">();</span> 
<span class="n">searchSourceBuilder</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">QueryBuilders</span><span class="o">.</span><span class="na">matchAllQuery</span><span class="o">());</span>  <span class="c1">// SearchSourceBuilder에 모든 쿼리 추가 </span>
<span class="n">searchRequest</span><span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">searchSourceBuilder</span><span class="o">);</span> 
</code></pre></div></div>

<h4 id="optional-arguments">Optional arguments</h4>

<p>SearchRequest에 optional arguments를 추가하여 검색의 범위를 지정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SearchRequest</span> <span class="n">searchRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchRequest</span><span class="o">(</span><span class="s">"animal"</span><span class="o">);</span>
<span class="c1">// 인덱스 animal만 검색 하도록 설정   </span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">searchRequest</span><span class="o">.</span><span class="na">routing</span><span class="o">(</span><span class="s">"routing"</span><span class="o">);</span> <span class="c1">// set a routing parameter   </span>
</code></pre></div></div>

<h4 id="using-the-searchsourcebuilder">Using the SearchSourceBuilder</h4>

<p>검색 동작을 제어하는 대부분의 옵션은 SearchSourceBuilder에서 설정 할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SearchSourceBuilder</span> <span class="n">sourceBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchSourceBuilder</span><span class="o">();</span> 
<span class="n">sourceBuilder</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">QueryBuilders</span><span class="o">.</span><span class="na">termQuery</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="s">"mike"</span><span class="o">));</span> 
<span class="c1">// user가 mike인 쿼리 생성   </span>
<span class="n">sourceBuilder</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>  <span class="c1">// default 0 </span>
<span class="n">sourceBuilder</span><span class="o">.</span><span class="na">size</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>  <span class="c1">// default 10 </span>
<span class="n">sourceBuilder</span><span class="o">.</span><span class="na">timeout</span><span class="o">(</span><span class="k">new</span> <span class="nc">TimeValue</span><span class="o">(</span><span class="mi">60</span><span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">));</span> 
</code></pre></div></div>

<h4 id="building-queries">Building queries</h4>

<p><code class="language-plaintext highlighter-rouge">검색 쿼리는 QueryBuilder 객체로 만들어진다. QueryBuilder는 엘라스틱 서치의 Query DSL에서 
제공되는 검색 쿼리 타입을 모두 가지고 있다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">QueryBuilder</span> <span class="n">matchQueryBuilder</span> <span class="o">=</span> <span class="nc">QueryBuilders</span><span class="o">.</span><span class="na">matchQuery</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="s">"kimchy"</span><span class="o">)</span>
                                                <span class="o">.</span><span class="na">fuzziness</span><span class="o">(</span><span class="nc">Fuzziness</span><span class="o">.</span><span class="na">AUTO</span><span class="o">)</span>
                                                <span class="o">.</span><span class="na">prefixLength</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
                                                <span class="o">.</span><span class="na">maxExpansions</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</code></pre></div></div>

<hr />

<h2 id="2-count-api">2. Count API</h2>

<p>Count Api에 대해 살펴보자.</p>

<h4 id="count-request">Count Request</h4>

<p><code class="language-plaintext highlighter-rouge">CountRequest는 쿼리에 매치되는 갯수를 가져오는데 사용된다.</code>  <br />
위에서 언급한 SearchSourceBuilder를 사용해서 SearchReqeust을 사용하는 방법과 
유사하게 사용할 수 있다.</p>

<p>기본 형태로는 아래와 같이 사용 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 모든 인덱스(indices)에 대해 CountRequest를 생성한다.</span>
<span class="nc">CountRequest</span> <span class="n">countRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountRequest</span><span class="o">();</span>
<span class="c1">// 대부분 search parameters는 SearchSourceBuilder를 추가한다.   </span>
<span class="nc">SearchSourceBuilder</span> <span class="n">searchSourceBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchSourceBuilder</span><span class="o">();</span>
<span class="c1">// match_all 를 추가 </span>
<span class="n">searchSourceBuilder</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">QueryBuilders</span><span class="o">.</span><span class="na">matchAllQuery</span><span class="o">());</span>
<span class="c1">// countRequest에 SearchSourceBuilder를 추가한다.  </span>
<span class="n">countRequest</span><span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">searchSourceBuilder</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="count-request-optional-arguments">Count Request optional arguments</h4>

<p><code class="language-plaintext highlighter-rouge">CountReqeust는 또한, optional arguments를 아래와 같이 사용할 수 있다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// index를 request에 제한 할 수 있다.   </span>
<span class="nc">CountRequest</span> <span class="n">countRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountRequest</span><span class="o">(</span><span class="s">"blog"</span><span class="o">)</span> 
    <span class="o">.</span><span class="na">routing</span><span class="o">(</span><span class="s">"routing"</span><span class="o">)</span>    <span class="c1">// routing parameter를 설정한다.   </span>
    <span class="o">.</span><span class="na">indicesOptions</span><span class="o">(</span><span class="nc">IndicesOptions</span><span class="o">.</span><span class="na">lenientExpandOpen</span><span class="o">())</span>  <span class="c1">// IndicesOptions 설정은 사용 할 수 없는 인덱스가 확인되는 방식과 와일드 카드식이 확장되는 방식을 제어한다.   </span>
    <span class="o">.</span><span class="na">preference</span><span class="o">(</span><span class="s">"_local"</span><span class="o">);</span>  <span class="c1">// 로컬 샤드를 선호하는 검색을 실행한다. 기본값은 샤드 전체에서 무작위로 하는 것.   </span>
</code></pre></div></div>

<h4 id="using-the-searchsourcebuilder-in-countreqeust">Using the SearchSourceBuilder in CountReqeust</h4>

<p>SearchSourceBuilder를 이용한 쿼리를 생성하여 CountReqeust를 실행해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">SearchSourceBuilder</span> <span class="n">sourceBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SearchSourceBuilder</span><span class="o">();</span> 
<span class="n">sourceBuilder</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="nc">QueryBuilders</span><span class="o">.</span><span class="na">termQuery</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="s">"mike"</span><span class="o">));</span>
</code></pre></div></div>

<p>위의 예제는 QueryBuilder를 사용하여 user가 mike인 쿼리를 생성하였다. <br />
그후 SearchSourceBuilder는 CountReqeust에 추가되어 실행 시킬 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CountRequest</span> <span class="n">countRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CountRequest</span><span class="o">();</span>
<span class="n">countRequest</span><span class="o">.</span><span class="na">indices</span><span class="o">(</span><span class="s">"blog"</span><span class="o">,</span> <span class="s">"author"</span><span class="o">);</span>  <span class="c1">// index : blog, author 지정     </span>
<span class="n">countRequest</span><span class="o">.</span><span class="na">source</span><span class="o">(</span><span class="n">sourceBuilder</span><span class="o">);</span>
</code></pre></div></div>

<p>더 자세한 쿼리는 <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-query-builders.html">Building Queries</a>를 
참조해보자.</p>

<h4 id="synchronous-execution">Synchronous execution</h4>

<p><code class="language-plaintext highlighter-rouge">CountReqeust를 실행했을 때, client는 CountResponse를 반환 될 때까지 
기다리게 된다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CountResponse</span> <span class="n">countResponse</span> <span class="o">=</span> <span class="n">client</span>
                <span class="o">.</span><span class="na">count</span><span class="o">(</span><span class="n">countRequest</span><span class="o">,</span> <span class="nc">RequestOptions</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="asynchronous-execution">Asynchronous execution</h4>

<p><code class="language-plaintext highlighter-rouge">CountReqeust는 위의 방법과는 다르게 비동기적으로 실행할 수도 있다. 아래와 같이 
요청과 리스너를 비동기 카운트 메서드에 전달하여 응답 또는 
잠재적 실패를 처리하는 방법을 지정할 수 있다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client</span><span class="o">.</span><span class="na">countAsync</span><span class="o">(</span><span class="n">countRequest</span><span class="o">,</span> <span class="nc">RequestOptions</span><span class="o">.</span><span class="na">DEFAULT</span><span class="o">,</span> <span class="n">listener</span><span class="o">);</span>
</code></pre></div></div>

<p>아래와 같이 ActionListener는 수행 후 성공적으로 완료되었다면 onResponse가 실행될 것이고, 
    실패한다면 onFailure가 실행된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ActionListener</span><span class="o">&lt;</span><span class="nc">CountResponse</span><span class="o">&gt;</span> <span class="n">listener</span> <span class="o">=</span>
    <span class="k">new</span> <span class="nc">ActionListener</span><span class="o">&lt;</span><span class="nc">CountResponse</span><span class="o">&gt;()</span> <span class="o">{</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onResponse</span><span class="o">(</span><span class="nc">CountResponse</span> <span class="n">countResponse</span><span class="o">)</span> <span class="o">{</span>
            
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            
        <span class="o">}</span>
    <span class="o">};</span>
</code></pre></div></div>

<h4 id="countresponse">CountResponse</h4>

<p><code class="language-plaintext highlighter-rouge">count API 호출을 실행하여 반환되는 CountResponse는 HTTP 상태 코드 또는 hits의 수(적중 수), 카운트 실행 
자체에 대한 세부 정보를 제공한다.</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">long</span> <span class="n">count</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getCount</span><span class="o">();</span>  <span class="c1">// 갯수 </span>
<span class="nc">RestStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">status</span><span class="o">();</span> <span class="c1">// HTTP Status </span>
<span class="nc">Boolean</span> <span class="n">terminatedEarly</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">isTerminatedEarly</span><span class="o">();</span> <span class="c1">// 일찍 종료되었는지 여부   </span>
</code></pre></div></div>

<p>Response는 또한 기본 검색의 영향을 받은 총 샤드수와 성공한 샤드와 
실패한 샤드에 대한 정보도 같이 제공한다.</p>

<p>실패한 샤드는 아래와 같이 반복문을 통해 처리 할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">totalShards</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getTotalShards</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">skippedShards</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getSkippedShards</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">successfulShards</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getSuccessfulShards</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">failedShards</span> <span class="o">=</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getFailedShards</span><span class="o">();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">ShardSearchFailure</span> <span class="n">failure</span> <span class="o">:</span> <span class="n">countResponse</span><span class="o">.</span><span class="na">getShardFailures</span><span class="o">())</span> <span class="o">{</span>
    <span class="c1">// failures should be handled here</span>
<span class="o">}</span>
</code></pre></div></div>

<hr />

<p><strong>Reference</strong></p>

<p><a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-search.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/master/java-rest-high-search.html</a><br />
<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.8/java-rest-overview.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.8/java-rest-overview.html</a><br />
<a href="https://velog.io/@jakeseo_me/%EB%B2%88%EC%97%AD-%EC%97%98%EB%9D%BC%EC%8A%A4%ED%8B%B1%EC%84%9C%EC%B9%98%EC%99%80-%ED%82%A4%EB%B0%94%EB%82%98-%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B8-%EC%86%8C%EA%B0%9C%EC%84%9C">https://velog.io/@jakeseo_me/%EB%B2%88%EC%97%AD-%EC%97%98%EB%9D%BC%EC%8A%A4%ED%8B%B1%EC%84%9C%EC%B9%98%EC%99%80-%ED%82%A4%EB%B0%94%EB%82%98-%EC%8B%A4%EC%9A%A9%EC%A0%81%EC%9D%B8-%EC%86%8C%EA%B0%9C%EC%84%9C</a><br />
<a href="https://medium.com/@sourav.pati09/how-to-use-java-high-level-rest-client-with-spring-boot-to-talk-to-aws-elasticsearch-2b6106f2e2c">https://medium.com/@sourav.pati09/how-to-use-java-high-level-rest-client-with-spring-boot-to-talk-to-aws-elasticsearch-2b6106f2e2c</a></p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://zcx6263.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET