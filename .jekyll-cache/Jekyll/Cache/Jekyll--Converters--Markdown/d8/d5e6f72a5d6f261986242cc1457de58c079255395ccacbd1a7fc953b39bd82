I"kU<h2 id="lca">LCA</h2>

<p><code class="language-plaintext highlighter-rouge">가장 가까운 위치의 공통 조상을 찾는데 쓰이거나 두 노드의 가장 가까운 
거리를 찾는데 사용한다.</code></p>

<p>시간 복잡도 O(N), 쿼리가 존재할 경우 O(MlogN)</p>

<h4 id="dp를-사용하지-않는-lca">DP를 사용하지 않는 LCA</h4>

<p>시나리오는 아래와 같다.</p>

<ol>
  <li>두 노드가 주어지게 되면 두 노드의 depth를 구한다.</li>
  <li>두 노드들 중 더 깊은 곳에 있는 노드를 다른 노드와 같아 질때 까지 
노드 위치를 끌어 올려준다. ( 부모노드로 계속 한칸 씩 끌어올리면서 
     두 노드의 깊이가 같아질 때 까지 끌어올린다)</li>
  <li>두 노드 깊이가 같으나 두 노드의 값이 같지 않다면 두 노드 모두 부모노드로 
끌어올리면서 같은지 확인( 두 노드가 같아질때까지 최소 공통 조상 )</li>
</ol>

<hr />

<h4 id="dp--lca">DP + LCA</h4>

<p>LCA를 구하는데 시간 복잡도 O(logN), 쿼리가 함께 존재할 경우 O(MlogN)</p>

<p><img width="600" alt="스크린샷 2020-03-15 오후 2 50 09" src="https://user-images.githubusercontent.com/26623547/76697031-58141600-66d5-11ea-9bfc-59f50578bc7f.png" /></p>

<p>깊이가 더 깊은 노드를 깊이가 더 낮은 노드까지 노드를 올려준다.</p>

<p><img width="600" alt="스크린샷 2020-03-15 오후 3 56 50" src="https://user-images.githubusercontent.com/26623547/76697061-9a3d5780-66d5-11ea-8b53-98101b0b4ba9.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 15 00" src="https://user-images.githubusercontent.com/26623547/101274171-374d9c80-37df-11eb-91b3-7d57938829c9.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 20 05" src="https://user-images.githubusercontent.com/26623547/101274174-3ae12380-37df-11eb-8223-8c4411a0e23f.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 20 19" src="https://user-images.githubusercontent.com/26623547/101274177-3caae700-37df-11eb-9eeb-9e6d300cd0e6.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 20 31" src="https://user-images.githubusercontent.com/26623547/101274178-3ddc1400-37df-11eb-8f9f-4c386b26adf2.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 20 40" src="https://user-images.githubusercontent.com/26623547/101274180-3e74aa80-37df-11eb-9df3-1269b1df64e4.png" /></p>

<p><img width="600" alt="스크린샷 2020-12-06 오후 4 20 55" src="https://user-images.githubusercontent.com/26623547/101274181-3f0d4100-37df-11eb-8550-ccd0488b967d.png" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">max_level</span> <span class="o">=</span> <span class="mi">17</span><span class="o">;</span> <span class="c1">// 2^17 이 100,000 을 조금 넘으므로</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span><span class="o">,</span> <span class="no">M</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">que</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">depth</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">par</span><span class="o">;</span>
    <span class="kd">static</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">adj</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// TODO Auto-generated method stub</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="n">adj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">par</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">max_level</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">depth</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">adj</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">depth</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="c1">// 주의 : 모두 -1로 초기화 해주기!</span>
        <span class="o">}</span> <span class="c1">// 아래 소스 중 if(depth[dx] &lt;= depth[par[dy][k]])</span>
        <span class="c1">// par[dy][k] 가 0이 나왔을때 dy 가 0으로 업데이트 되면 안되기 때문에 depth[0] = -1 반드시 해주기</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;=</span> <span class="no">N</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">dx</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">dy</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="n">adj</span><span class="o">[</span><span class="n">dx</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">dy</span><span class="o">);</span>
            <span class="n">adj</span><span class="o">[</span><span class="n">dy</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">dx</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">que</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="c1">// 루트 부터 depth 와 각 노드별 조상 기록 하기</span>
        <span class="n">depth</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">que</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">que</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>

            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">next</span> <span class="o">:</span> <span class="n">adj</span><span class="o">[</span><span class="n">n</span><span class="o">])</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">depth</span><span class="o">[</span><span class="n">next</span><span class="o">]</span> <span class="o">=</span> <span class="n">depth</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="n">par</span><span class="o">[</span><span class="n">next</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
                    <span class="n">que</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">max_level</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 각 노드 별로 부모 기록 !</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">cur</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="o">;</span> <span class="n">cur</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">// 2^0 , 2^1, 2^2 ..</span>
                <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
                <span class="n">par</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">tmp</span><span class="o">][</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">dx</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">dy</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">!=</span> <span class="n">depth</span><span class="o">[</span><span class="n">dy</span><span class="o">])</span> <span class="o">{</span>

                <span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">depth</span><span class="o">[</span><span class="n">dy</span><span class="o">])</span> <span class="o">{</span> <span class="c1">// dy 기준으로 depth 맞추기 위해서</span>
                    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">dx</span><span class="o">;</span>
                    <span class="n">dx</span> <span class="o">=</span> <span class="n">dy</span><span class="o">;</span>
                    <span class="n">dy</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="c1">// dy 를 올려서 depth 를 맞춰준다.</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">max_level</span><span class="o">;</span> <span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">depth</span><span class="o">[</span><span class="n">dx</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">depth</span><span class="o">[</span><span class="n">par</span><span class="o">[</span><span class="n">dy</span><span class="o">][</span><span class="n">k</span><span class="o">]])</span> <span class="o">{</span>
                        <span class="n">dy</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">dy</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="kt">int</span> <span class="n">lca</span> <span class="o">=</span> <span class="n">dx</span><span class="o">;</span>
            <span class="c1">// dx dy 다르다면 현재 깊이가 같으니 </span>
            <span class="c1">// 깊이를 계속 올려 조상이 같아질 때 까지 반복 ! </span>
            <span class="k">if</span><span class="o">(</span><span class="n">dx</span> <span class="o">!=</span> <span class="n">dy</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">max_level</span><span class="o">;</span> <span class="n">k</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span><span class="o">--)</span> <span class="o">{</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">par</span><span class="o">[</span><span class="n">dx</span><span class="o">][</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="n">par</span><span class="o">[</span><span class="n">dy</span><span class="o">][</span><span class="n">k</span><span class="o">])</span> <span class="o">{</span>
                        <span class="n">dx</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">dx</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
                        <span class="n">dy</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">dy</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
                    <span class="o">}</span>
                    <span class="n">lca</span> <span class="o">=</span> <span class="n">par</span><span class="o">[</span><span class="n">dx</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">lca</span><span class="o">+</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="lca2를-이용한-정점들간의-거리">LCA2를 이용한 정점들간의 거리</h3>

<p>백준 1761 정점들간의 거리</p>

<p>두 정점간의 최단거리를 매 쿼리마다 출력하는 문제이다. 우리가 기본적으로 
알고있는 그래프의 최단거리 알고리즘은 시간복잡도 때문에 사용할 수가 없다. 
하지만 우리는 이 그래프가 트리라는 것을 이용하여 매 쿼리를 O(logN)시간 마다 처리해 줄 수 있다.</p>

<hr />

<p>Reference</p>

<p><a href="https://www.crocus.co.kr/660">https://www.crocus.co.kr/660</a></p>

<div id="disqus_thread"></div>
<script>

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
/*
var disqus_config = function () {
this.page.url = PAGE_URL;  // Replace PAGE_URL with your page's canonical URL variable
this.page.identifier = PAGE_IDENTIFIER; // Replace PAGE_IDENTIFIER with your page's unique identifier variable
};
*/
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://zcx6263.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
</script>

<noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>

:ET